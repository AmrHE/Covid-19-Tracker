{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setdata","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","ChangeView","useMap","setView","MapContainer","TileLayer","url","attribution","App","setCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.773b85d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({title, cases, total, active, isRed, ...props }) {\r\n  return (\r\n      <Card \r\n        onClick={props.onClick} \r\n        className={\r\n          `infoBox \r\n          ${active && 'infoBox--selected'} \r\n          ${isRed && 'infoBox--red'}`\r\n        }\r\n        >\r\n          \r\n        <CardContent>\r\n          <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n            {title}\r\n          </Typography>\r\n          <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n          <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n            {total} Total\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n  )\r\n}\r\n\r\nexport default InfoBox\r\n","import { React, useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for(let date in data.cases) {\r\n    if(lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data['cases'][date] - lastDataPoint\r\n      };\r\n      chartData.push(newDataPoint);\r\n    };\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setdata] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        let chartData = buildChartData(data, casesType);\r\n        setdata(chartData);\r\n      });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {/*data && data.length > 0 && */}\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5\",\r\n                borderColor: \"#CC1034\",\r\n                data: data\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      <table>\r\n        <tbody>\r\n          {countries.map(country => (\r\n            <tr key={country.country}>\r\n              <td>{country.country}</td>\r\n              <td><strong>{numeral(country.cases).format(\"0,0\")}</strong></td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 200,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 500,\r\n  },\r\n};\r\n\r\n\r\n//Sort the country table Data with cases\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if(a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    };\r\n  });\r\n  return sortedData\r\n};\r\n\r\n\r\n//Reformat the InfoBox numbers\r\nexport const prettyPrintStat = (stat) =>\r\nstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw circles on the map with interactive tooltips\r\nexport const showDataOnMap = (data, casesType) => (\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex, \r\n        fillColor: casesTypeColors[casesType].hex \r\n      }}      \r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{backgroundImage: `url(${country.countryInfo.flag})`}}\r\n          />\r\n          <div className=\"info-name\">\r\n            {country.country}\r\n          </div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ))\r\n);","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { MapContainer, useMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ casesType, countries, center, zoom }) {\r\n\r\n  function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <MapContainer \r\n      className=\"map\"\r\n      center={center}\r\n      zoom={zoom}\r\n    >\r\n      <ChangeView center={center} zoom={zoom} />\r\n        <TileLayer \r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' \r\n        />\r\n      {showDataOnMap(countries, casesType)}\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default Map\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport LineGraph from './LineGraph';\nimport Table from './Table';\nimport { prettyPrintStat, sortData } from './util';\nimport numeral from 'numeral';\nimport Map from './Map';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat:34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n\n\n  //Fetch the worlwide Data\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n\n  //Fetch the countries list\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n\n\n        let sortedData = sortData(data);\n        setCountries(countries);\n        setTableData(sortedData);\n        setMapCountries(data);\n      });\n    };\n    getCountriesData();\n  }, []);\n\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    \n    const url = countryCode === 'worldwide' ? \n    'https://disease.sh/v3/covid-19/all' : \n    `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    \n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      //All the data we got of a single country from the API response\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select \n              variant=\"outlined\" \n              value={country}\n              onChange={onCountryChange} \n            >\n            <MenuItem value=\"worldwide\" >Worldwide</MenuItem>\n            {countries.map(country => (\n              <MenuItem key={country.name} value={country.value}>{country.name}</MenuItem>\n            ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox \n            onClick={(e) => setCasesType('cases')}\n            title=\"Coronavirus Cases\" \n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={numeral(countryInfo.cases).format(\"0.0a\")} \n          />\n          <InfoBox \n            onClick={(e) => setCasesType('recovered')}\n            title=\"Recovered\" \n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={numeral(countryInfo.recovered).format(\"0.0a\")} \n          />\n          <InfoBox \n            onClick={(e) => setCasesType('deaths')}\n            isRed\n            active={casesType === \"deaths\"}\n            title=\"Deaths\" \n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={numeral(countryInfo.deaths).format(\"0.0a\")} \n          />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      \n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}